package "FlyCloudC/algograph"

// Values

// Types and methods
type Bfs[A]
fn[A] Bfs::at(Self[A], Int) -> Iter[Int]
fn[A] Bfs::at_all(Self[A]) -> Iter[Int]
fn[A] Bfs::on(Graph[A]) -> Self[A]
fn[A] Bfs::visited(Self[A], Int) -> Bool

type Dfs[A]
fn[A] Dfs::at(Self[A], Int) -> Iter[Int]
fn[A] Dfs::at_all(Self[A]) -> Iter[Int]
fn[A] Dfs::on(Graph[A]) -> Self[A]
fn[A] Dfs::visited(Self[A], Int) -> Bool

type Graph[A]
fn[A] Graph::add_edge(Self[A], Int, Int) -> Unit
fn[A] Graph::add_edge_undirected(Self[A], Int, Int) -> Unit
fn[A] Graph::bfs(Self[A]) -> Bfs[A]
fn[A] Graph::data(Self[A], Int) -> A
fn[A] Graph::dfs(Self[A]) -> Dfs[A]
fn[A] Graph::from_datas(Array[A]) -> Self[A]
fn[A] Graph::has_edge(Self[A], Int, Int) -> Bool
fn[A] Graph::make(Int, A) -> Self[A]
fn[A] Graph::new(capacity~ : Int = ..) -> Self[A]
fn[A] Graph::node_count(Self[A]) -> Int
fn[A] Graph::push(Self[A], A) -> Int
fn[A] Graph::remove_edge(Self[A], Int, Int) -> Bool
fn[A] Graph::zip_with(Self[A], Iter[Int]) -> Iter2[Int, A]

// Type aliases

// Traits

